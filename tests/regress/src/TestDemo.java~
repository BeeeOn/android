package com.rehivetech.beeeon;
import android.os.RemoteException;
import android.os.RemoteException;
import android.content.ComponentName;
import android.content.Intent;

import com.android.uiautomator.core.UiDevice;
import com.android.uiautomator.core.UiObject;
import com.android.uiautomator.core.UiObjectNotFoundException;
import com.android.uiautomator.core.UiScrollable;
import com.android.uiautomator.core.UiSelector;

import com.android.uiautomator.testrunner.UiAutomatorTestCase;

import org.testng.Assert;
import org.testng.annotations.Test;

/**
 * Tests for GUI
 * @uthor Martina Kůrová
 */
public class TestDemo extends UiAutomatorTestCase {

    private String currentTestName;
    protected Boolean testFailed = true;
    //private static final String TEST_APP_PKG = "com.rehivetech.beeeon.debug";
    /*private static final Intent START_LOGIN_ACTIVITY = new Intent(Intent.ACTION_MAIN)
    .setComponent(new ComponentName(TEST_APP_PKG, TEST_APP_PKG + ".LoginActivity"))
    .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);*/

    // Get the device properties
    UiDevice myDevice = getUiDevice();

    private void setCurrentTestName(String testName) {
        this.currentTestName = testName;
        //takeScreenshot("start");
    }

    protected void trace(String message){
        System.out.println("### " + message + " ###");
    }

    // TODO launch app in emulator / in real device connected via USB
    protected void launchApp(String application) throws UiObjectNotFoundException{
        //Simulate a short press on the HOME button.
        getUiDevice().pressHome();
        //Now we get the allApps button to launch the allapps screen
        UiObject allAppsButton = new UiObject(new UiSelector().description("Apps"));
        allAppsButton.clickAndWaitForNewWindow();
        //this is to make sure we are in the apps page, So even if the page was in widgets tab, it will come to the apps tab
        UiObject appsTab = new UiObject(new UiSelector().text("Apps"));
        appsTab.click();
        // Next, in the apps tabs, we can simulate a user swiping until
        // they come to the Settings app icon. Since the container view
        // is scrollable, we can use a UiScrollable object.
        UiScrollable appViews = new UiScrollable(new UiSelector()
        .scrollable(true));
        // Set the swiping mode to horizontal (the default is vertical)
        appViews.setAsHorizontalList();
        //Getting hold of our app to be opened
        UiObject appToBeLaunched = appViews.getChildByText(new UiSelector()
        .className(android.widget.TextView.class.getName()),
        application);
        appToBeLaunched.clickAndWaitForNewWindow();
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
         // Launch the BeeeOn app
        //getInstrumentation().getContext().startActivity(START_LOGIN_ACTIVITY);
        /*getUiDevice().pressHome();
        String packageName = "com.rehivetech.beeeon.debug";
        //String component = packageName + "/activity.LoginActivity";
        String action = "am start -a android.intent.action.MAIN -n ";

        // start settings application
        Runtime.getRuntime().exec(action + packageName);

        UiObject settingsUi = new UiObject(new UiSelector().packageName(packageName));
        assertTrue("Application settings not started", settingsUi.waitForExists(5000));*/
        // TODO Auto-generated method stub
        trace("In setup, Launching the application");
        /*
        * Over here, I am trying to launch the application
        * Now there are two ways to do that
        * 1. Getting runtime environment and starting the application using "am" and call the invoking path for the
        * activity from the AndroidManifest.xml*/
        //Runtime.getRuntime().exec("am start -n com.rehivetech.beeeon.debug/com.rehivetech.beeeon.activity.LoginActivity");
        // beta for ant-2
        Runtime.getRuntime().exec("am start -n com.rehivetech.beeeon/com.rehivetech.beeeon.activity.LoginActivity");
        /** Now, since I do not have the activity name to launch the application, I cannot use the "am" command to
        * launch the application (Unless i reverse engineer the apk to get the AndroidManifest.xml to get the activity name
        *
        * 2. Conventional way, Launch the application via the apps page from the device, which I am going to use
        */
        //launchApp("BeeeOn (debug)");
        sleep(3000);
        testFailed = true;
    }

    @Override
    protected void tearDown() throws Exception {
        //takeScreenshot("end");
        // Simulate a short press on the HOME button.
        getUiDevice().pressHome();
        super.tearDown();
    }

    /**
     * Objects definition
     */
    // All App Tray Button
    UiObject AppTrayButton = new UiObject(new UiSelector().description("Apps"));

    // Get AppTray container
    UiScrollable appView = new UiScrollable(new UiSelector().className(
            "android.view.View").scrollable(true));
    // Apps Tab
    UiObject AppsTab = new UiObject(new UiSelector().className(
            "android.widget.TextView").description("Apps"));
    // Verify the launched application by it's Package name
    //UiObject beeeonValidation = new UiObject(new UiSelector().packageName("com.rehivetech.beeeon.debug"));
    // for beta testers
    UiObject beeeonValidation = new UiObject(new UiSelector().packageName("com.rehivetech.beeeon"));
    // for alpha tester
    //UiObject beeeonValidation = new UiObject(new UiSelector().packageName("com.rehivetech.beeeon"));
    UiObject currentPackage = new UiObject(
            new UiSelector());
    // demo button
    UiObject googleImageButton = new UiObject(new UiSelector().className(
            android.widget.ImageButton.class.getName())
            .index(0));
    // demo button
    UiObject mojeIDImageButton = new UiObject(new UiSelector().className(
            android.widget.ImageButton.class.getName())
            .index(1));
    // demo button
    UiObject demoImageButton = new UiObject(new UiSelector().className(
            android.widget.ImageButton.class.getName())
            .index(2));
    // menu - nav drawer
    UiObject menuNavDrawerButton = new UiObject(new UiSelector().className(
            android.widget.ImageButton.class.getName())
            .index(0));
    // overview
    UiObject overview =  new UiObject(new UiSelector()
            .className(android.widget.TextView.class.getName())
            .text("Overview"));
    // device name text (TextView)
    UiObject deviceNameText =  new UiObject(new UiSelector()
            .className(android.widget.TextView.class.getName())
            .text("Televizor"));
    // logout (TextView)
    UiObject logoutText =  new UiObject(new UiSelector()
            .className(android.widget.TextView.class.getName())
            .text("Logout"));
    // NEXT 
    UiObject nextButton =  new UiObject(new UiSelector()
            .className(android.widget.Button.class.getName())
            .text("NEXT"));
    // SKIP 
    UiObject skipButton =  new UiObject(new UiSelector()
            .className(android.widget.Button.class.getName())
            .text("SKIP"));
    // Cancel 
    UiObject cancelButton =  new UiObject(new UiSelector()
            .className(android.widget.Button.class.getName())
            .text("Cancel"));
    // START 
    UiObject startIntroButton =  new UiObject(new UiSelector()
            .className(android.widget.Button.class.getName())
            .text("START"));
    // START 
    UiObject addButton =  new UiObject(new UiSelector()
            .className(android.widget.Button.class.getName())
            .text("ADD"));
    // fab button - menu
    UiObject fabMenu = new UiObject(new UiSelector().className(
            android.widget.ImageButton.class.getName())
            .index(2));
    // fab add adapter
    UiObject fabAddAdapterButton = new UiObject(new UiSelector().className(
            android.widget.ImageButton.class.getName())
            .index(6));
    // fab add device
    UiObject fabAddDeviceButton = new UiObject(new UiSelector().className(
            android.widget.ImageButton.class.getName())
            .index(5));

    UiObject nameAdaptereditText = new UiObject(new UiSelector().className(
            android.widget.EditText.class.getName())
            .index(1));
    UiObject idAdaptereditText = new UiObject(new UiSelector().className(
            android.widget.EditText.class.getName())
            .index(2));

    UiObject logout = new UiObject(new UiSelector().description("Logout"));


    /************************************************************************************
     * Actual Tests starts here
     ***********************************************************************************/ 

    /**
     * Validate BeeeOn App by it's package name
     */
    // Launch BeeeOn Application

    @Test	// for testng
    public void test_00_LaunchApp() throws RemoteException, UiObjectNotFoundException {

        setCurrentTestName("testLaunchTestApp");

        //assertTrue("BeeeON App not launched! Please, run BeeeOn app.", beeeonValidation.exists());
        
        assertTrue("Unable to detect BeeeOn", beeeonValidation.exists());
        //assertEquals("BeeeON App not launched! Please, run BeeeOn app.","com.rehivetech.beeeon.debug", currentPackage.getPackageName());
        //if(!currentPackage.getPackageName().equals("com.rehivetech.beeeon.debug")){
        //}
        //assertEquals(super.getClass().toString(), "LoginActivity.class");
        //beeeOnApp.clickAndWaitForNewWindow();

    }
    //@Test	// for testng
    public void test_01_Intro() throws UiObjectNotFoundException, Exception {

        // clicking through the intro
        assertTrue("No intro started.", nextButton.exists());
        nextButton.clickAndWaitForNewWindow();
        assertTrue("NEXT button not found.", nextButton.exists());
        nextButton.clickAndWaitForNewWindow();
        assertTrue("NEXT button not found.", nextButton.exists());
        nextButton.clickAndWaitForNewWindow();
        assertTrue("NEXT button not found.", nextButton.exists());
        nextButton.clickAndWaitForNewWindow();
        assertTrue("START Button not found", startIntroButton.exists());
        startIntroButton.clickAndWaitForNewWindow();

        // logout and start the app again

        // log in
        demoImageButton.clickAndWaitForNewWindow();

        // TODO check "Add adapter" guide
        
        // show nav drawer
        menuNavDrawerButton.click();
       
        // scroll to logout
        if(logoutText.exists()){
            logoutText.clickAndWaitForNewWindow();
        }
        else{
            assertTrue("Logout is not found", new UiScrollable(new UiSelector().scrollable(true)).scrollIntoView(logoutText));
            logoutText.clickAndWaitForNewWindow();
        }

        // press back button
        getUiDevice().pressBack();

        // start app again 
        //Runtime.getRuntime().exec("am start -n com.rehivetech.beeeon.debug/com.rehivetech.beeeon.activity.LoginActivity");
        // beta for ant-2
        Runtime.getRuntime().exec("am start -n com.rehivetech.beeeon/com.rehivetech.beeeon.activity.LoginActivity");
        sleep(3);

        // assert that no intro appear this time
        assertFalse("Intro started for the second time.", nextButton.exists());

    }

   /* public void xtest_1_accessViaGoogle() throws UiObjectNotFoundException {
        // click on demo button
        assertTrue("Google Button not found", googleImageButton.exists());
        assertTrue("No new window", googleImageButton.clickAndWaitForNewWindow());
        logout();
    }

	public void xtest_2_acceessViaMojeID() throws UiObjectNotFoundException {
        // click on demo button
        assertTrue("MojeID Button not found", mojeIDImageButton.exists());
        assertTrue("No new window", mojeIDImageButton.clickAndWaitForNewWindow());
        logout();
    }*/
    //@Test	// for testng
    public void test_02_accesToDemoMode() throws UiObjectNotFoundException {
        // click on demo button
        assertTrue("Demo Button not found", demoImageButton.exists());
        assertTrue("No new window", demoImageButton.clickAndWaitForNewWindow());
        //logout();
    }

    /**
     * @depends test__accessViaGoogle
     * @depends test__accessToDemoMode
     ****
        * There was 1 skipped test:
        *1) DependencyFailureTest::testTwo
        *This test depends on "DependencyFailureTest::testOne" to pass.
        *
     */
    //@Test	// for testng
    public void test_03_AddAdapter() throws UiObjectNotFoundException {

        // open menu - nav drawer
        assertTrue("Menu (NavDrawer) Button not found", menuNavDrawerButton.exists());
        menuNavDrawerButton.click();

        // select "overview"
        assertTrue("Overview field is not found", overview.exists());
        overview.clickAndWaitForNewWindow();

        // open fab menu
        //assertTrue("Fab Button not found", fabMenu.exist());
        //if(fabMenu.exist())
            fabMenu.click();

        // add adapter
        //assertTrue("Fab menu item - Add adapter - not found", fabAddAdapterButton.exist());
        fabAddAdapterButton.clickAndWaitForNewWindow();

        // guide
        // TODO try SKIP, Cancel
        assertTrue("NEXT button not found.", nextButton.exists());
        nextButton.clickAndWaitForNewWindow();
        assertTrue("NEXT button not found.", nextButton.exists());
        nextButton.clickAndWaitForNewWindow();
        assertTrue("NEXT button not found.", nextButton.exists());
        nextButton.clickAndWaitForNewWindow();

        // input
        // ID: 47818 (0xBACA) - TESTBED
        String name = "0xBACA";
        String id = "47818";

        nameAdaptereditText.setText(name);
        idAdaptereditText.setText(id);

        // confirm
        //getObjectByText("ADD").clickAndWaitForNewWindow();
        addButton.clickAndWaitForNewWindow();

        // verify that device was added
        /*UiObject result = new UiObject(new UiSelector().className(
                android.widget.LinearLayout.class.getName()).childSelector(
                (new UiSelector().className(android.widget.ScrollView.class.getName())
                        .childSelector(new UiSelector().className(android.widget.TextView.class
                                .getName())))));
        if (!testText.equals(result.getText())) {
            throw new UiObjectNotFoundException("Test text: " + testText);
        }*/

        
    }
    //@Test	// for testng
    public void test_03_AddDevice() throws UiObjectNotFoundException {

        // open menu - nav drawer
        assertTrue("Menu (NavDrawer) Button not found", menuNavDrawerButton.exists());
        menuNavDrawerButton.click();

        // select "overview"
        assertTrue("Overview field is not found", overview.exists());
        overview.clickAndWaitForNewWindow();

        // open fab menu
        fabMenu.click();

        // add device
        //assertTrue("Fab menu item - Add device - not found", fabAddDeviceButton.exist());
        fabAddDeviceButton.clickAndWaitForNewWindow();

        // guide 
        // TODO check guide
        // assertTrue("NEXT button not found.", nextButton.exists());
        // nextButton.clickAndWaitForNewWindow();
        // assertTrue("NEXT button not found.", nextButton.exists());
        // nextButton.clickAndWaitForNewWindow();
        // assertTrue("NEXT button not found.", nextButton.exists());
        // nextButton.clickAndWaitForNewWindow();

        // input

        // confirm
        
    }
    //@Test	// for testng
    public void test_04_DeviceManagement() throws UiObjectNotFoundException {

        // show device detail

        // rename device

        // change device location

        // change refresh time

        // show nex device detail

        // change aktor state
    }

    // Change device location
    /*public void xtest_4_ChangeDeviceLocation() throws UiObjectNotFoundException {

        // Click on Menu button
        //myDevice.pressMenu();

        // click on demo button
        assertTrue("Demo Button not found", demoImageButton.exists());
        demoImageButton.clickAndWaitForNewWindow();

        // open menu - nav drawer
        assertTrue("Menu (NavDrawer) Button not found", menuNavDrawerButton.exists());
        menuNavDrawerButton.click();

        // select "overview"
        assertTrue("Overview field is not found", overview.exists());
        overview.clickAndWaitForNewWindow();

        // click on some senzor
        //assertTrue("Device text filed named \"" + deviceNameText.getText() + "\" is not found", deviceNameText.exists());
        assertTrue("Device text filed named \\\"\" + deviceNameText.getText() + \"\\\" is not found", 
            new UiScrollable(
                new UiSelector().scrollable(true)
            ).scrollIntoView(deviceNameText));
        deviceNameText.clickAndWaitForNewWindow();
    }*/
    //@Test	// for testng
    public void test__Dashboard() throws UiObjectNotFoundException {
    
        //
    }
    //@Test	// for testng
    public void test__Watchdog() throws UiObjectNotFoundException {
    
        //
    }
    //@Test	// for testng
    public void test__Settings() throws UiObjectNotFoundException {
    
        //
    }
    //@Test	// for testng
    public void test__About() throws UiObjectNotFoundException {
    
        //
    }
    //@Test	// for testng
    public void test__Minimize() throws UiObjectNotFoundException {
    
        // minimize

        //
    }
    //@Test	// for testng
    public void test__Maximize() throws UiObjectNotFoundException {
    
        // maximize

        //
    }
    //@Test	// for testng
    public void test__ExitApp() throws UiObjectNotFoundException {
    
        // exit

        // verify that application 
    }

    public static void logMessage(String logMessage) {
        String strLogMessage = "*** GNM: " + logMessage;
        System.out.println(strLogMessage);
    }

    public void logout() throws UiObjectNotFoundException {
    	// open menu - nav drawer
        assertTrue("Menu (NavDrawer) Button not found", menuNavDrawerButton.exists());
        menuNavDrawerButton.click();
        // scroll to logout
    	assertTrue("Logout is not found", 
        	new UiScrollable(
        		new UiSelector().scrollable(true)
            ).scrollIntoView(logoutText));
        logoutText.clickAndWaitForNewWindow();
    }
}
